D:\training\Anaconda3\Scripts\activate aiml 
jupyter notebook --notebook-dir='D:/handson'


#Step-1  , Run - Shift+Enter 
print("Hello world!")

#Step-2
2 + 2

#Step-3: access last result 
_ * 3

#step-4: execute shell command 
!dir

#step-5: Magic command 
#https://ipython.readthedocs.io/en/stable/interactive/magics.html
%lsmagic

#Step-51:Use 
%pwd  #look at the current work dir
%cd   #change to the dir you want 
    
#Step-6: Use cell magic 
%%writefile test.txt
Hello world!


# Let's check what this file contains.
with open('test.txt', 'r') as f:
    print(f.read())


#find more information about any command by adding ? after it
#eg running external program 
%run?

#Step-7 : Create Markdown cell
press Esc and then press M (can be done with Menu as well)
    ##Command 
    Toggle between edit and command mode with Esc and Enter, respectively.
    Once in command mode:
        Scroll up and down your cells with your Up and Down keys.
        Press A or B to insert a new cell above or below the active cell.
        M will transform the active cell to a Markdown cell.
        Y will set the active cell to a code cell.
        D + D (D twice) will delete the active cell.
        Z will undo cell deletion.
        Hold Shift and press Up or Down to select multiple cells at once.
            With multple cells selected, Shift + M will merge your selection.
    Ctrl + Shift + -, in edit mode, will split the active cell at the cursor.
    You can also click and Shift + Click in the margin to the left of your cells to select them.
Markdown  can be written with HTML tags as well as below github commands 
To edit markdown cell, double click it 
To show, click run or Shift+ENTER (there should not be any whitespace in the begining)

# This is a level 1 heading
## This is a level 2 heading
This is some plain text that forms a paragraph.
Add emphasis via **bold** and __bold__, or *italic* and _italic_.

Paragraphs must be separated by an empty line.

* Sometimes we want to include lists.
 * Which can be indented.

1. Lists can also be numbered.
2. For ordered lists.

[It is possible to include hyperlinks](https://www.example.com)

Inline code uses single backticks: `foo()`, and code blocks use triple backticks:

```
bar()
```

Or can be intented by 4 spaces:

    foo()

And finally, adding images is easy: ![Alt text](https://www.example.com/image.jpg)

Also mathematical equation [check Latex link](http://ctan.math.ca/tex-archive/info/symbols/comprehensive/SYMLIST) 
$$\hat{f}(\xi) = \int_{-\infty}^{+\infty} f(x) \, \exp \left(-2i\pi x \xi \right) dx $$


#Step-9: Sophisticated display 
from IPython.display import HTML, SVG, YouTubeVideo

#Step-10. HTML table dynamically with Python
HTML('''
<table style="border: 2px solid black;">
''' +
     ''.join(['<tr>' +
              ''.join([f'<td>{row},{col}</td>'
                       for col in range(5)]) +
              '</tr>' for row in range(5)]) +
     '''
</table>
''')

#create an SVG graphics dynamically:

SVG('''<svg width="600" height="80">''' +
    ''.join([f'''<circle
              cx="{(30 + 3*i) * (10 - i)}"
              cy="30"
              r="{3. * float(i)}"
              fill="red"
              stroke-width="2"
              stroke="black">
        </circle>''' for i in range(10)]) +
    '''</svg>''')



#display a Youtube video 
YouTubeVideo('VQBZ2MqWBZI')



#Notebooks are saved as structured text files (JSON format), 
nbconvert is a tool that can convert notebooks to other formats: raw text, 
Markdown, HTML, LaTeX/PDF

There is a free online service, nbviewer Lets renders notebook into HTML 
check https://nbviewer.jupyter.org/ 
When you give it a URL, it fetches the notebook from that URL, converts it to HTML, 
and serves that HTML to you.
nbviewer only supports launching notebooks stored on GitHub or as Gists on Binder. 
Binder(https://mybinder.org)does support other providers directly on the mybinder.org site.

Locally to get the same functionality (and more)
Check help 
$ jupyter nbconvert 

#To html 
$ jupyter nbconvert first.ipynb

#display this html 
from IPython.display import IFrame
IFrame('first.html', 600, 200)

To save jupyter nootbook as pdf, install pandoc(anaconda brings it) and MikTex 
https://github.com/jgm/pandoc/releases/latest
https://miktex.org/download (check where miktex-tex.exe)
then start jupyter - Note first time while saving, it may download many files, 
hence may fail couple of time, but keep on trying 

$ jupyter nbconvert --to pdf first.ipynb




##matplotlib 
t = np.arange(0., 5., 0.2)
figure, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, sharex=True, sharey=False, figsize=(15,15))
figure.suptitle('multiplot', fontsize=16) #called suptitle instead of title 
ax1.plot(t, t, 'r-')  
ax1.set_title('Straight line')
ax2.scatter(t, t**2, color='b')
ax2.set_xlabel('x axis label')
ax2.set_ylabel('y axis label')
ax2.set_title('Simple plot')
ax2.legend(['Square',])

ax2.axis([0, 5, 0,25]) #Set the axis, [xmin, xmax, ymin, ymax] or 'off' or 'equal' or 'scaled' or 'tight' etc 
ax2.set_axis_off() #Turn off the axis. 
ax2.set_axis_on()  # Turn on the axis.
#or 
ax2.set_ylim(0,25)
ax2.set_xlim(0, 5) 

#in data cordinates 
ax2.text(2, 4, r'$\mu=100,\ \sigma=15$')  #Any text 
ax2.annotate('local max', xy=(2, 1), xytext=(3, 1.5),arrowprops=dict(facecolor='black', shrink=0.05),) #xytext=location of text, xy=location for annotation
ax2.arrow(4,4,1,1)  #(x, y, dx, dy, **kwargs)    #Add an arrow to the axes.
ax2.grid(b=True, color='r', linestyle='-', linewidth=.5)
#ax2.set_label(s)       #Set the label to s for auto legend.
 

ax2.set_yscale('linear') #log, symlog, logit
ax2.set_xscale('linear')
ax2.set_visible(True)     #Set the artist's visibility.
#ax2.set_zorder(level)  #Set the zorder for the artist. Artists with lower zorder values are drawn first.

# ax2.set_xticks(ticks, minor=False)     #Set the x ticks with list of ticks(List of tick locations.)
# ax2.set_xticklabels(labels, fontdict=None, minor=False, **kwargs)#Set the x-tick labels with list of string labels.
# ax2.set_yticks(ticks, minor=False)#Set the y ticks with list of ticks(List of tick locations.)
# ax2.set_yticklabels(labels, fontdict=None, minor=False, **kwargs)#Set the y-tick labels with list of strings labels.

# ax2.xaxis_date(tz=None)  #Sets up x-axis ticks and labels that treat the x data as dates.
# ax2.yaxis_date(tz=None)  #Sets up y-axis ticks and labels that treat the y data as dates.
# ax2.minorticks_off()     #Remove minor ticks from the axes.
# ax2.minorticks_on()      #Remove minor ticks from the axes.

#then show 
plt.show()

##numpy 
$$f(x,y) = sin^2(3\pi x)+(x−1)^2(1+sin^2(3\pi y))+(y−1)^2(1+sin^2(2\pi y))$$



##plotly 
import plotly.graph_objs as go
import plotly.offline as py 
py.init_notebook_mode(connected=True) #only in jupyter 
 
data = [
    go.Scatter(                         # all "scatter" attributes: https://plot.ly/python/reference/#scatter
        x=[1, 2, 3],                    # more about "x":  /python/reference/#scatter-x
        y=[3, 1, 6],                    # more about "y":  /python/reference/#scatter-y
        marker=dict(                    # marker is an dict, marker keys: /python/reference/#scatter-marker
            color="rgb(16, 32, 77)"     # more about marker's "color": /python/reference/#scatter-marker-color
        )
    ),
    go.Bar(                         # all "bar" chart attributes: /python/reference/#bar
        x=[1, 2, 3],                # more about "x": /python/reference/#bar-x
        y=[3, 1, 6],                # /python/reference/#bar-y
        name="bar chart example"    # /python/reference/#bar-name
    )
]

layout = go.Layout(             # all "layout" attributes: /python/reference/#layout
    title="simple example",     # more about "layout's" "title": /python/reference/#layout-title
    xaxis=dict(                 # all "layout's" "xaxis" attributes: /python/reference/#layout-xaxis
        title="time"            # more about "layout's" "xaxis's" "title": /python/reference/#layout-xaxis-title
    ),
    annotations=[
        dict(                            # all "annotation" attributes: /python/reference/#layout-annotations
            text="simple annotation",    # /python/reference/#layout-annotations-text
            x=0,                         # /python/reference/#layout-annotations-x
            xref="paper",                # /python/reference/#layout-annotations-xref
            y=0,                         # /python/reference/#layout-annotations-y
            yref="paper"                 # /python/reference/#layout-annotations-yref
        )
    ]
)

figure = go.Figure(data=data, layout=layout)
figure.show()


##Pandas 
url = "https://raw.githubusercontent.com/ndas1971/Misc/master/bikes.csv"
df = pd.read_csv(url, index_col='Date', parse_dates=True, dayfirst=True)


from ipywidgets import interact,interact_manual

@interact(n=(1, 30))
def plot(n=5):
    fig, ax = plt.subplots(1, 1, figsize=(10, 8))
    df['Berri1'].rolling(window=n).mean().plot(ax=ax)
    ax.set_ylim(0, 7000)
    plt.show()
  
#@interact_manual decorator  provides a button to call the function manually
@interact_manual(n=(1, 30))
def plot(n=5):
    fig, ax = plt.subplots(1, 1, figsize=(10, 8))
    df['Berri1'].rolling(window=n).mean().plot(ax=ax)
    ax.set_ylim(0, 7000)
    plt.show()

#2
player = 'Roger Federer'
df = pd.read_csv("https://raw.githubusercontent.com/ndas1971/Misc/master/federer.csv",
                 parse_dates=['start date'],
                 dayfirst=True)
                 
                 
                 
# www.ncdc.noaa.gov/ibtracs/index.php?name=wmo-data
df = pd.read_csv("https://raw.githubusercontent.com/ndas1971/Misc/master/Allstorms.ibtracs_wmo.v03r05.csv")



###Titanic Data 
https://www.kaggle.com/c/titanic/data
0. Understand data, download only train.csv 
A. Do below in pandas 
1. Read data 
2. Check head , datatypes , columns
3. How many rows are present?
4. display all rows and columns from 'name' to  'sibsp' inclusive
5. How many NaN are present in 'fare' and 'embarked' 
6. Replace any NaN of 'fare' and 'embarked'  by statistical mode of that column 
7. drop cabin 
8. check any row containing any null 
9. Display first row of above , can you find which column is still null 
10.Setup the data 
a) create 'Title' column (take title from 'name')
b) Create 'LastName' column from 'name' 
c) Create  'FamilySize' which is equal to 'sibsp' + 'parch' + 1
d) Create 'FamilyID' which concatenation of 'LastName' and 'FamiliySize'
e) if family size is <=2 , make 'FamilyID' as 'Small_Family'
f) Create 'AgeOriginallyNaN' as 0 or 1 based on age is NaN or present 
g) For each title, get median age , and rename 'age' column to AgeFilledMedianByTitle
Create a new DataFrame (would be used for merging) of above 
g)Create 'final_age' which would contain 'age' if not NaN else value of 'AgeFilledMedianByTitle'
Hint: Use df.merge(right,...) and then use df.apply 
g.1)check that all final_age is correctly filled 
  
11. drop age column 
12.Drop any row which contain any NaN 



##All imports 

###SkLearn Imports 
from sklearn.pipeline import * 
from sklearn.naive_bayes import * 
from sklearn.cluster import *  
from sklearn.covariance import *  
from sklearn.cross_decomposition import *  
from sklearn.datasets import *  
from sklearn.decomposition import *  
from sklearn.ensemble import *  
from sklearn.feature_extraction import *  
from sklearn.feature_extraction.text import *  
from sklearn.feature_selection import *  
from sklearn.gaussian_process import *  
from sklearn.linear_model import *  
from sklearn.manifold import *  
from sklearn.metrics import *  
from sklearn.mixture import *  
from sklearn.model_selection import *  
from sklearn.neighbors import *  
from sklearn.neural_network import *  
from sklearn.preprocessing import *  
from sklearn_pandas import DataFrameMapper
from sklearn.svm import *  
from sklearn.tree import *  

import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt


##PCA 
def draw_pca(X_r, y, target_names):
    plt.figure()
    colors = ['navy', 'turquoise', 'darkorange']
    lw = 2
    #[0,1,2] are three Names 
    for color, i, target_name in zip(colors, [0, 1, 2], target_names):
        #draw 2 pca features for each y = target_names,3 species 
        plt.scatter(X_r[y == i, 0], X_r[y == i, 1], color=color, alpha=.8, lw=lw, label=target_name)
    plt.legend(loc='best', shadow=False, scatterpoints=1)
    plt.title('PCA of IRIS dataset')
    plt.show()
    
    
